package Labs.lab3;

/**
 * Этот класс представляет собой один шаг в пути, генерируемом алгоритмом поиска пути A*.
 * Путевые точки состоят из местоположения, предыдущей путевой точки на пути и некоторых значений затрат,
 * используемых для определения наилучшего пути.
 **/
public class Waypoint {
    /** Расположение этой путевой точки. **/
    Location loc;

    /** Предыдущая путевая точка в этом пути или <code>null</code>, если это корень поиска A*. **/
    Waypoint prevWaypoint;

    /**
     * В этом поле хранится общая предыдущая стоимость перехода от
     * начального местоположения к этой путевой точке через цепочку путевых точек.
     * Это фактическая стоимость следования по пути; она не включает никаких оценок.
     **/
    private float prevCost;

    /** В этом поле хранится оценка оставшейся стоимости путешествия от этой путевой точки до конечного пункта назначения. **/
    private float remainingCost;


    /**
     * Создайте новую маршрутную точку для указанного местоположения.
     * При необходимости можно указать предыдущую путевую точку или ссылку <code>null</code>,
     * чтобы указать, что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint) {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Возвращает местоположение путевой точки. **/
    public Location getLocation() {
        return loc;
    }

    /** Возвращает предыдущую путевую точку в пути или <code>null</code>, если это начало пути. **/
    public Waypoint getPrevious() {
        return prevWaypoint;
    }

    /**
     * Этот мутатор позволяет установить как предыдущую стоимость,
     * так и оставшуюся стоимость за один вызов метода.
     * Обычно эти значения будут установлены в одно и то же время в любом случае.
     **/
    public void setCosts(float prevCost, float remainingCost) {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Возвращает фактическую стоимость достижения этой точки из
     * исходного местоположения через ряд путевых точек в этой цепочке.
     **/
    public float getPreviousCost() {
        return prevCost;
    }

    /** Возвращает оценку оставшейся стоимости путешествия от этой точки до конечного пункта назначения. **/
    public float getRemainingCost() {
        return remainingCost;
    }

    /**
     * Возвращает общую смету затрат для этой путевой точки.
     * Это включает в себя фактические затраты на то, чтобы добраться до этой точки от начального местоположения,
     * плюс оценку оставшейся стоимости путешествия от этой точки до конечного пункта назначения.
     **/
    public float getTotalCost() {
        return prevCost + remainingCost;
    }
}
